```solidity
pragma solidity ^0.8.0;

import "truffle/Assert.sol";
import "../contracts/InsuranceContract.sol";

contract InsuranceContractTest {
    InsuranceContract insuranceContract;

    function beforeEach() public {
        insuranceContract = new InsuranceContract();
    }

    function testMedicareCoverage() public {
        bool hasPartA = true;
        bool hasPartB = true;
        bool hasPartD = false;
        bool hasESRD = false;
        bool hasOtherHealthCoverage = false;

        bool isCovered = insuranceContract.isMedicareCoverage(hasPartA, hasPartB, hasPartD, hasESRD, hasOtherHealthCoverage);

        Assert.isTrue(isCovered, "Medicare coverage should be available");
    }

    function testMedicareDrugCoverage() public {
        bool hasPartB = true;
        bool hasPartD = false;

        bool isCovered = insuranceContract.isMedicareDrugCoverage(hasPartB, hasPartD);

        Assert.isTrue(isCovered, "Medicare drug coverage should be available");
    }

    function testJoinMedicareDrugPlan() public {
        bool hasOriginalMedicare = true;

        bool canJoin = insuranceContract.canJoinMedicareDrugPlan(hasOriginalMedicare);

        Assert.isTrue(canJoin, "Can join Medicare drug plan");
    }

    function testESRDExpiration() public {
        bool hasESRD = true;
        uint256 monthsAfterTransplant = 40;

        bool hasCoverage = insuranceContract.hasESRDCoverage(hasESRD, monthsAfterTransplant);

        Assert.isFalse(hasCoverage, "ESRD coverage should have expired");
    }

    function testImmunosuppressiveDrugBenefit() public {
        bool hasPartA = false;
        bool hasOtherHealthCoverage = false;

        bool isEligible = insuranceContract.isEligibleForImmunosuppressiveDrugBenefit(hasPartA, hasOtherHealthCoverage);

        Assert.isTrue(isEligible, "Eligible for immunosuppressive drug benefit");
    }

    function testPremiumAndDeductible() public {
        uint256 year = 2023;
        uint256 premium = insuranceContract.getPremium(year);
        uint256 deductible = insuranceContract.getDeductible(year);

        Assert.equal(premium, 97.10 ether, "Incorrect premium amount");
        Assert.equal(deductible, 226 ether, "Incorrect deductible amount");
    }

    function testDrugPayment() public {
        uint256 approvedAmount = 100 ether;
        uint256 deductible = 226 ether;
        uint256 paymentPercentage = 20;

        uint256 paymentAmount = insuranceContract.calculateDrugPayment(approvedAmount, deductible, paymentPercentage);

        Assert.equal(paymentAmount, 20 ether, "Incorrect drug payment amount");
    }
}
```
Note: The above code assumes that the `InsuranceContract` contract has been implemented with the necessary functions and logic to pass the tests.