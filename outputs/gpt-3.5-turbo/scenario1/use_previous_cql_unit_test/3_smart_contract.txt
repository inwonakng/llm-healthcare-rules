Here is a Solidity smart contract that implements the conditions described in the summary and the CQL named expressions:

```solidity
pragma solidity ^0.8.0;

contract InjectableOsteoporosisDrugsCoverage {
    struct Condition {
        string code;
        string system;
        string display;
        string gender;
        uint256 birthDate;
        string clinicalStatus;
    }
    
    struct Coding {
        string code;
        string system;
        string display;
    }
    
    struct CodeableConcept {
        Coding[] coding;
    }
    
    struct Encounter {
        CodeableConcept[] type;
        uint256 start;
        uint256 end;
    }
    
    struct ServiceRequest {
        CodeableConcept[] category;
        string status;
    }
    
    Condition[] conditions;
    Encounter[] encounters;
    ServiceRequest[] serviceRequests;
    
    constructor() {
        // Initialize conditions, encounters, and serviceRequests arrays with sample data
        conditions.push(Condition("64859006", "http://snomed.info/sct", "Osteoporosis", "female", 1970, "active"));
        conditions.push(Condition("72704001", "http://snomed.info/sct", "Fracture of bone", "female", 1970, "active"));
        
        encounters.push(Encounter([CodeableConcept([Coding("HH", "http://terminology.hl7.org/CodeSystem/v3-ActCode", "Home health service")])], block.timestamp, block.timestamp + 1 days));
        
        serviceRequests.push(ServiceRequest([CodeableConcept([Coding("home-health", "http://terminology.hl7.org/CodeSystem/service-request-category", "")])], "active"));
    }
    
    function isWomanWithOsteoporosis() public view returns (bool) {
        for (uint256 i = 0; i < conditions.length; i++) {
            if (keccak256(bytes(conditions[i].code)) == keccak256(bytes("64859006")) &&
                keccak256(bytes(conditions[i].system)) == keccak256(bytes("http://snomed.info/sct")) &&
                keccak256(bytes(conditions[i].display)) == keccak256(bytes("Osteoporosis")) &&
                keccak256(bytes(conditions[i].gender)) == keccak256(bytes("female")) &&
                conditions[i].birthDate <= block.timestamp - 50 years &&
                conditions[i].birthDate >= block.timestamp - 90 years &&
                keccak256(bytes(conditions[i].clinicalStatus)) == keccak256(bytes("active"))) {
                return true;
            }
        }
        return false;
    }
    
    function meetsCriteriaForHomeHealthBenefit() public view returns (bool) {
        // Implement the logic to check if the person meets the criteria for the Medicare home health benefit
        return true;
    }
    
    function hasFractureRelatedToOsteoporosis() public view returns (bool) {
        for (uint256 i = 0; i < conditions.length; i++) {
            if (keccak256(bytes(conditions[i].code)) == keccak256(bytes("72704001")) &&
                keccak256(bytes(conditions[i].system)) == keccak256(bytes("http://snomed.info/sct")) &&
                keccak256(bytes(conditions[i].display)) == keccak256(bytes("Fracture of bone")) &&
                keccak256(bytes(conditions[i].gender)) == keccak256(bytes("female")) &&
                conditions[i].birthDate <= block.timestamp - 50 years &&
                conditions[i].birthDate >= block.timestamp - 90 years &&
                keccak256(bytes(conditions[i].clinicalStatus)) == keccak256(bytes("active"))) {
                return true;
            }
        }
        return false;
    }
    
    function unableToSelfAdministerInjection() public view returns (bool) {
        // Implement the logic to check if the person is unable to give themselves the injection or learn how to give themselves the drug by injection
        return true;
    }
    
    function familyOrCaregiversUnableOrUnwilling() public view returns (bool) {
        // Implement the logic to check if the person's family or caregivers are unable or unwilling to give them the drug by injection
        return true;
    }
    
    function isCoverageEligible() public view returns (bool) {
        if (isWomanWithOsteoporosis() &&
            meetsCriteriaForHomeHealthBenefit() &&
            hasFractureRelatedToOsteoporosis() &&
            unableToSelfAdministerInjection() &&
            familyOrCaregiversUnableOrUnwilling()) {
            return true;
        }
        return false;
    }
}
```

Please note that the implementation of the `meetsCriteriaForHomeHealthBenefit`, `unableToSelfAdministerInjection`, and `familyOrCaregiversUnableOrUnwilling` functions is missing as the logic for these conditions was not provided in the CQL named expressions. You will need to implement these functions based on the specific criteria mentioned in the insurance policy document.

The `isCoverageEligible` function checks if all the conditions are met and returns `true` if the person is eligible for coverage under the insurance policy, and `false` otherwise.

You can test the smart contract by calling the various functions and verifying the output.