```solidity
pragma solidity ^0.8.0;

contract InsurancePolicy {
    struct Patient {
        bool hasConditionPrimaryImmuneDeficiencyDisease;
        bool hasConditionMedicallyAppropriate;
        bool hasDecisionCoverIVIG;
        bool hasDecisionCoverIVIGInHome;
        bool hasDecisionCoverIVIGCost;
        bool hasDecisionDoNotCoverOtherServices;
    }
    
    mapping(address => Patient) public patients;
    
    function checkMedicareCoverage(string memory condition) public view returns (bool) {
        if (keccak256(bytes(condition)) == keccak256(bytes("primary immune deficiency disease"))) {
            return patients[msg.sender].hasDecisionCoverIVIG;
        }
        return false;
    }
    
    function checkHomeDelivery(string memory condition) public view returns (bool) {
        if (keccak256(bytes(condition)) == keccak256(bytes("primary immune deficiency disease"))) {
            return patients[msg.sender].hasDecisionCoverIVIGInHome;
        }
        return false;
    }
    
    function checkIVIGCostCoverage() public view returns (bool) {
        return patients[msg.sender].hasDecisionCoverIVIGCost;
    }
    
    function checkOtherServicesCoverage() public view returns (bool) {
        return patients[msg.sender].hasDecisionDoNotCoverOtherServices;
    }
    
    function determineMedicallyAppropriate(address patient) public {
        patients[patient].hasConditionMedicallyAppropriate = true;
    }
    
    function determineCoverIVIG(address patient) public {
        patients[patient].hasDecisionCoverIVIG = true;
    }
    
    function determineCoverIVIGInHome(address patient) public {
        patients[patient].hasDecisionCoverIVIGInHome = true;
    }
    
    function determineCoverIVIGCost(address patient) public {
        patients[patient].hasDecisionCoverIVIGCost = true;
    }
    
    function determineDoNotCoverOtherServices(address patient) public {
        patients[patient].hasDecisionDoNotCoverOtherServices = true;
    }
}
```

The smart contract `InsurancePolicy` implements the logic described in the insurance policy document and the N3 rules. It includes a `Patient` struct to store the conditions and decisions for each patient. The `patients` mapping is used to associate each patient's address with their corresponding `Patient` struct.

The contract provides the following functions:
- `checkMedicareCoverage`: Takes a condition as input and returns whether Medicare covers IVIG for that condition.
- `checkHomeDelivery`: Takes a condition as input and returns whether home delivery is allowed for IVIG for that condition.
- `checkIVIGCostCoverage`: Returns whether Medicare Part B covers the cost of IVIG.
- `checkOtherServicesCoverage`: Returns whether Medicare covers other items and services related to IVIG at home.
- `determineMedicallyAppropriate`: Sets the `hasConditionMedicallyAppropriate` flag to true for the specified patient.
- `determineCoverIVIG`: Sets the `hasDecisionCoverIVIG` flag to true for the specified patient.
- `determineCoverIVIGInHome`: Sets the `hasDecisionCoverIVIGInHome` flag to true for the specified patient.
- `determineCoverIVIGCost`: Sets the `hasDecisionCoverIVIGCost` flag to true for the specified patient.
- `determineDoNotCoverOtherServices`: Sets the `hasDecisionDoNotCoverOtherServices` flag to true for the specified patient.

The unit tests provided in the `InsurancePolicyTest` contract can be used to verify the correctness of the smart contract implementation.