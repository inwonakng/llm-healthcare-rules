Here is a possible implementation of the smart contract based on the summary and unit tests provided:
```
pragma solidity ^0.8.0;

contract InjectableOsteoporosisDrugs {
    struct Patient {
        address patientAddress;
        bool isWomanWithOsteoporosis;
        bool hasBoneFracture;
        bool isPostMenopausalOsteoporosis;
        bool cannotGiveInjection;
        bool cannotLearnInjection;
        bool hasHomeHealthCoverage;
        bool isUnableToGiveInjection;
    }

    mapping(address => Patient) public patients;

    function addPatient(address patientAddress, bool isWomanWithOsteoporosis, bool hasBoneFracture, bool isPostMenopausalOsteoporosis, bool cannotGiveInjection, bool cannotLearnInjection, bool hasHomeHealthCoverage, bool isUnableToGiveInjection) public {
        patients[patientAddress] = Patient(patientAddress, isWomanWithOsteoporosis, hasBoneFracture, isPostMenopausalOsteoporosis, cannotGiveInjection, cannotLearnInjection, hasHomeHealthCoverage, isUnableToGiveInjection);
    }

    function isWomanWithOsteoporosis(address patientAddress) public view returns (bool) {
        return patients[patientAddress].isWomanWithOsteoporosis;
    }

    function hasBoneFracture(address patientAddress) public view returns (bool) {
        return patients[patientAddress].hasBoneFracture;
    }

    function isPostMenopausalOsteoporosis(address patientAddress) public view returns (bool) {
        return patients[patientAddress].isPostMenopausalOsteoporosis;
    }

    function cannotGiveInjection(address patientAddress) public view returns (bool) {
        return patients[patientAddress].cannotGiveInjection;
    }

    function cannotLearnInjection(address patientAddress) public view returns (bool) {
        return patients[patientAddress].cannotLearnInjection;
    }

    function hasHomeHealthCoverage(address patientAddress) public view returns (bool) {
        return patients[patientAddress].hasHomeHealthCoverage;
    }

    function isUnableToGiveInjection(address patientAddress) public view returns (bool) {
        return patients[patientAddress].isUnableToGiveInjection;
    }
}
```
This smart contract defines a `Patient` struct that encapsulates the necessary parameters for a patient, and a `patients` mapping that maps patient addresses to `Patient` structs. The contract also defines several functions that can be used to add a patient, check if a patient is a woman with osteoporosis, has a bone fracture, is post-menopausal osteoporosis, cannot give themselves the injection or learn how to give themselves the drug by injection, has home health coverage, and is unable to give themselves the drug by injection.

The unit tests provided can be used to test the functionality of the smart contract. For example, the `testWomanWithOsteoporosis` function can be used to test if a patient is a woman with osteoporosis who meets the criteria for the Medicare home health benefit. The `testBoneFracture` function can be used to test if a patient has a bone fracture that a doctor certifies was related to post-menopausal osteoporosis. The `testInjection` function can be used to test if a patient's doctor certifies that they can't give themselves the injection or learn how to give themselves the drug by injection. The `testHomeHealthCoverage` function can be used to test if Medicare will cover the home health nurse or aide to provide the injection if the patient's family or caregivers are unable or unwilling to give them the drug by injection.

Note that this is just one possible implementation of the smart contract, and there may be other ways to implement the functionality described in the summary and unit tests.