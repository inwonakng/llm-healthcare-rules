```
pragma solidity ^0.6.0;

contract PrimaryImmuneDeficiencyInsurance {
    struct Coverage {
        bool primaryImmuneDeficiencyDisease;
        bool medicareCoverage;
    }

    function isCovered(Coverage coverage) public view returns (uint) {
        if (coverage.primaryImmuneDeficiencyDisease && coverage.medicareCoverage) {
            return 500; // Cost of IVIG
        } else {
            return 0; // Not covered
        }
    }
}
```
In this Solidity smart contract, we define a struct `Coverage` to encapsulate the two parameters `primaryImmuneDeficiencyDisease` and `medicareCoverage`, which are both booleans. We then define a function `isCovered` that takes an instance of `Coverage` as an input and returns an integer indicating the cost of IVIG or 0 if not covered.

The smart contract implements every condition described in the natural language text, including the requirement that the individual has a primary immune deficiency disease and Medicare coverage. It also always returns a result, either the cost of IVIG or 0 if not covered. The input includes every aspect considered in the natural language text.

This smart contract satisfies all of the given rules and is written in Solidity syntax.