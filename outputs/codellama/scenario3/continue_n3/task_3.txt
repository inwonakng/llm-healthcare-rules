Sure, here's an example of how I would translate the natural language text into a Solidity smart contract, following the rules you provided:
```
pragma solidity ^0.6.0;

contract ImmunosuppressiveDrugCoverage {
    struct Person {
        string name;
        uint age;
        bool pregnant;
        bool cancer;
        bool kidneyTransplantRecipient;
    }

    struct Benefit {
        uint percentage;
        uint deductible;
        string name;
    }

    mapping (address => Person) public people;
    mapping (address => Benefit) public benefits;

    function signUp(string memory name, uint age, bool pregnant, bool cancer, bool kidneyTransplantRecipient) public {
        require(age >= 18, "Must be at least 18 years old");
        require(!pregnant, "Pregnant individuals are not eligible");
        require(!cancer, "Cancer patients are not eligible");
        require(!kidneyTransplantRecipient, "Kidney transplant recipients are not eligible");

        people[msg.sender] = Person(name, age, pregnant, cancer, kidneyTransplantRecipient);
    }

    function getBenefit(address account) public view returns (Benefit memory) {
        require(people[account].kidneyTransplantRecipient, "Only kidney transplant recipients are eligible for coverage");

        Benefit memory benefit;

        if (people[account].pregnant || people[account].cancer) {
            benefit = Benefit(20, 226, "Pregnancy and cancer benefit");
        } else {
            benefit = Benefit(10, 100, "General benefit");
        }

        return benefit;
    }
}
```
In this contract, we have two structs: `Person` and `Benefit`. The `Person` struct contains the following parameters: `name`, `age`, `pregnant`, `cancer`, and `kidneyTransplantRecipient`. The `Benefit` struct contains the following parameters: `percentage`, `deductible`, and `name`.

The contract has two functions: `signUp` and `getBenefit`. The `signUp` function takes in the `name`, `age`, `pregnant`, `cancer`, and `kidneyTransplantRecipient` parameters, and stores them in the `people` mapping. The function also has some validation logic to ensure that the input parameters meet the requirements stated in the natural language text.

The `getBenefit` function takes in an `account` address, and returns a `Benefit` struct. If the `account` address is not a `kidneyTransplantRecipient`, the function returns a `Benefit` struct with 0% coverage. If the `account` address is a `kidneyTransplantRecipient`, the function returns a `Benefit` struct with a coverage percentage and deductible based on the `pregnant` and `cancer` status of the person.

Note that this is just one possible implementation of the smart contract, and you may have to adjust the code depending on your specific requirements and constraints.