Here is a sample Solidity smart contract that implements the requirements described in the summary and CQL named expressions:
```
pragma solidity ^0.8.0;

contract MedicareImmunosuppressiveDrugBenefit {
    struct Patient {
        address patientAddress;
        string patientName;
        uint256 patientAge;
        uint256 transplantDate;
        uint256 drugTherapyDate;
        uint256 premium;
        uint256 deductible;
        uint256 coverage;
        uint256 signUp;
        uint256 callSocialSecurity;
        uint256 ttyUsers;
        uint256 premium2023;
        uint256 deductible2023;
        uint256 coverage2023;
        uint256 signUp2023;
        uint256 callSocialSecurity2023;
        uint256 ttyUsers2023;
    }

    mapping(address => Patient) public patients;

    function hasPartACoverage(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65;
    }

    function hasPartBCoverage(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65;
    }

    function hasMedicareDrugCoverage(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65;
    }

    function isEligibleForImmunosuppressiveDrugBenefit(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65 && patients[patientAddress].transplantDate >= 36 && patients[patientAddress].drugTherapyDate >= 36;
    }

    function canSignUpForBenefit(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65 && patients[patientAddress].transplantDate >= 36 && patients[patientAddress].drugTherapyDate >= 36;
    }

    function premiumAndDeductible(address patientAddress) public view returns (uint256, uint256) {
        return (97.10, 226);
    }

    function isDrugCovered(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65 && patients[patientAddress].transplantDate >= 36 && patients[patientAddress].drugTherapyDate >= 36;
    }

    function hasMetDeductible(address patientAddress) public view returns (bool) {
        return patients[patientAddress].patientAge >= 65 && patients[patientAddress].transplantDate >= 36 && patients[patientAddress].drugTherapyDate >= 36;
    }

    function copay(address patientAddress) public view returns (uint256) {
        return 0.2;
    }
}
```
Note that this is just a sample implementation and may need to be modified to fit your specific use case. Additionally, this contract does not include any functionality for handling payments or tracking drug usage, which would be necessary for a full implementation of the immunosuppressive drug benefit.