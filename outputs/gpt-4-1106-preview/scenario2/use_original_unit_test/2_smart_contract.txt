Below is a simplified example of how you might translate the given insurance policy document into a Solidity smart contract. Please note that this is a basic example and real-world contracts would need to be much more comprehensive, including error handling, access control, and potentially interaction with other contracts and systems for verification of conditions like diagnoses and doctor approvals.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IVIGInsurancePolicy {
    // Define a struct to encapsulate patient details and IVIG treatment information
    struct Patient {
        address id;
        bool hasPrimaryImmuneDeficiency;
        bool isMedicallyAppropriateForHomeIVIG;
        bool doctorApprovalReceived;
    }

    // State variable to store patient information
    mapping(address => Patient) public patients;

    // Event to log insurance claims
    event InsuranceClaimProcessed(address patientId, bool isCovered, string reason);

    // Function to register a patient's diagnosis and doctor's approval
    function registerPatient(
        address _patientId,
        bool _hasPrimaryImmuneDeficiency,
        bool _isMedicallyAppropriateForHomeIVIG,
        bool _doctorApprovalReceived
    ) public {
        patients[_patientId] = Patient({
            id: _patientId,
            hasPrimaryImmuneDeficiency: _hasPrimaryImmuneDeficiency,
            isMedicallyAppropriateForHomeIVIG: _isMedicallyAppropriateForHomeIVIG,
            doctorApprovalReceived: _doctorApprovalReceived
        });
    }

    // Function to process an insurance claim for IVIG treatment
    function processInsuranceClaim(address _patientId) public {
        Patient memory patient = patients[_patientId];

        // Check if the patient has a primary immune deficiency
        if (!patient.hasPrimaryImmuneDeficiency) {
            emit InsuranceClaimProcessed(_patientId, false, "Patient does not have a primary immune deficiency disease.");
            return;
        }

        // Check if it's medically appropriate for the patient to get IVIG at home
        if (!patient.isMedicallyAppropriateForHomeIVIG) {
            emit InsuranceClaimProcessed(_patientId, false, "It is not medically appropriate for the patient to get IVIG at home.");
            return;
        }

        // Check if the doctor's approval has been received
        if (!patient.doctorApprovalReceived) {
            emit InsuranceClaimProcessed(_patientId, false, "Doctor's approval has not been received.");
            return;
        }

        // If all conditions are met, the insurance covers the IVIG
        emit InsuranceClaimProcessed(_patientId, true, "IVIG is covered by insurance.");
    }
}
```

This contract defines a `Patient` struct to store relevant information about the patient and their eligibility for IVIG treatment at home. It includes a `registerPatient` function to input patient details and a `processInsuranceClaim` function to determine if the patient's IVIG treatment is covered by insurance based on the conditions outlined in the policy document. The contract emits an event with the result of the insurance claim processing, which includes whether the claim is covered and the reason for the decision.