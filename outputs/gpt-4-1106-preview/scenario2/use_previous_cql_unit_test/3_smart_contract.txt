Based on the provided summary, CQL named expressions, and Solidity unit tests, here is a Solidity smart contract that implements the insurance policy logic:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IVIGCoverageContract {
    // Define a struct to encapsulate patient information and service request
    struct PatientServiceRequest {
        bool isProvidedInHome;
        bool hasPrimaryImmuneDeficiency;
        bool isMedicallyAppropriate;
        bool isCoveredByMedicarePartB;
        bool hasOtherItemsAndServices;
    }

    // Check if IVIG is provided in the patient's home
    function isIVIGProvidedInHome(bool isProvidedInHome) public pure returns (bool) {
        return isProvidedInHome;
    }

    // Check if the patient has a diagnosis of primary immune deficiency disease
    function hasDiagnosisOfPrimaryImmuneDeficiency(bool hasPrimaryImmuneDeficiency) public pure returns (bool) {
        return hasPrimaryImmuneDeficiency;
    }

    // Check if it is medically appropriate for the patient to receive IVIG at home
    function isMedicallyAppropriateForHomeIVIG(bool isMedicallyAppropriate) public pure returns (bool) {
        return isMedicallyAppropriate;
    }

    // Check if Medicare Part B covers the cost of IVIG
    function isCoveredByMedicarePartB(bool isCoveredByMedicarePartB) public pure returns (bool) {
        return isCoveredByMedicarePartB;
    }

    // Check if Medicare Part B does not cover the cost of other items and services related to IVIG at home
    function isExclusionOfOtherItemsAndServices(bool hasOtherItemsAndServices) public pure returns (bool) {
        return !hasOtherItemsAndServices;
    }

    // Determine IVIG coverage eligibility based on the provided information
    function determineIVIGCoverageEligibility(PatientServiceRequest memory request) public pure returns (bool) {
        return isIVIGProvidedInHome(request.isProvidedInHome) &&
               hasDiagnosisOfPrimaryImmuneDeficiency(request.hasPrimaryImmuneDeficiency) &&
               isMedicallyAppropriateForHomeIVIG(request.isMedicallyAppropriate) &&
               isCoveredByMedicarePartB(request.isCoveredByMedicarePartB) &&
               isExclusionOfOtherItemsAndServices(request.hasOtherItemsAndServices);
    }
}
```

This contract defines a `PatientServiceRequest` struct to hold the necessary parameters for determining IVIG coverage eligibility. Each function corresponds to a condition from the insurance policy summary and CQL named expressions. The `determineIVIGCoverageEligibility` function uses these helper functions to evaluate the overall eligibility based on the input data.

Please note that the actual codes for the code systems mentioned in the CQL named expressions are not included in this Solidity contract, as they would be part of the off-chain logic that determines the values of the boolean flags passed to the contract functions. The contract assumes that these evaluations are done off-chain and that the contract is only responsible for the logic that determines coverage based on the boolean inputs.