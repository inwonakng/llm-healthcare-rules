```
pragma solidity ^0.8.0;

contract MedicareCoverage {
    enum Location {HOME, OTHER}
    enum Disease {PRIMARY_IMMUNE_DEFICIENCY, OTHER}
    enum Treatment {IVIG, OTHER}

    struct Patient {
        bool hasMedicarePartB;
        Disease disease;
    }

    struct Doctor {
        bool deemsIVIGAppropriate;
    }

    Patient public patient;
    Doctor public doctor;

    constructor(Patient memory _patient, Doctor memory _doctor) {
        patient = _patient;
        doctor = _doctor;
    }

    function evaluateCoverage(Location location, Treatment treatment) public view returns(bool) {
        if(patient.hasMedicarePartB && patient.disease == Disease.PRIMARY_IMMUNE_DEFICIENCY && doctor.deemsIVIGAppropriate && location == Location.HOME && treatment == Treatment.IVIG) {
            return true;
        } else {
            return false;
        }
    }

    function evaluateAdditionalServiceCoverage() public view returns(bool) {
        if(patient.hasMedicarePartB){
            return false;
        } else {
            return true;
        }
    }
}
```
This Solidity smart contract defines a MedicareCoverage contract, which helps determine whether a patient is eligible to have IVIG treatment covered under Medicare Part B, based on a number of conditions. The Patient and Doctor structs are used to encapsulate patient and doctor parameters.