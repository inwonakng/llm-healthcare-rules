```
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MedicareCoverage {
    
    enum Part { A, B, D }
    enum HealthCoverage { GroupHealthPlan, TRICARE, Medicaid }
    
    struct Transplant {
        bool isCovered;
        Part partA;
        Part partB;
        Part partD;
    }
    
    struct Immunotherapy {
        bool isCovered;
        Part partB;
        Part partD;
    }
    
    struct KidneyTransplantBenefit {
        bool isAvailable;
        bool isSubstitute;
        uint premium;
        uint deductible;
        uint paymentPercentage;
    }
    
    mapping(address => Transplant) public transplantCoverage;
    mapping(address => Immunotherapy) public immunotherapyCoverage;
    mapping(address => KidneyTransplantBenefit) public kidneyTransplantBenefit;
    
    function addTransplantCoverage(address beneficiary, Part partA, Part partB, Part partD) external {
        transplantCoverage[beneficiary] = Transplant(true, partA, partB, partD);
    }
    
    function addImmunotherapyCoverage(address beneficiary, Part partB, Part partD) external {
        immunotherapyCoverage[beneficiary] = Immunotherapy(true, partB, partD);
    }
    
    function addKidneyTransplantBenefit(address beneficiary, bool isAvailable, bool isSubstitute, uint premium, uint deductible, uint paymentPercentage) external {
        kidneyTransplantBenefit[beneficiary] = KidneyTransplantBenefit(isAvailable, isSubstitute, premium, deductible, paymentPercentage);
    }
    
    function getTransplantCoverage(address beneficiary) external view returns (bool) {
        return transplantCoverage[beneficiary].isCovered;
    }
    
    function getImmunotherapyCoverage(address beneficiary) external view returns (bool) {
        return immunotherapyCoverage[beneficiary].isCovered;
    }
    
    function getKidneyTransplantBenefit(address beneficiary) external view returns (bool) {
        return kidneyTransplantBenefit[beneficiary].isAvailable;
    }
    
    function getCoverageAfter36Months(address beneficiary) external view returns (bool) {
        if (transplantCoverage[beneficiary].partA == Part.A && isESRD(beneficiary)) {
            // Check if 36 months have passed after a successful kidney transplant
            return (block.timestamp >= (36 * 30 days));
        }
        return false;
    }
    
    function isESRD(address beneficiary) private view returns (bool) {
        // Check if beneficiary has Medicare due to End-Stage Renal Disease (ESRD)
        // Logic to check ESRD status
        return true;
    }
    
    function getImmunosuppressiveDrugCoverage(address beneficiary) external view returns (bool) {
        if (transplantCoverage[beneficiary].isCovered) {
            // Part B or Part D covers immunosuppressive drugs
            return (transplantCoverage[beneficiary].partB == Part.B || transplantCoverage[beneficiary].partD == Part.D);
        }
        return false;
    }
    
    function getPremiumAmount(address beneficiary) external view returns (uint) {
        if (kidneyTransplantBenefit[beneficiary].isAvailable) {
            return kidneyTransplantBenefit[beneficiary].premium;
        }
        return 0;
    }
    
    function getDeductibleAmount(address beneficiary) external view returns (uint) {
        if (kidneyTransplantBenefit[beneficiary].isAvailable) {
            return kidneyTransplantBenefit[beneficiary].deductible;
        }
        return 0;
    }
    
    function getPaymentPercentage(address beneficiary) external view returns (uint) {
        if (kidneyTransplantBenefit[beneficiary].isAvailable) {
            return kidneyTransplantBenefit[beneficiary].paymentPercentage;
        }
        return 0;
    }

}
```
Note: This is a basic implementation of a smart contract to demonstrate how the logic described in the natural language text can be translated into Solidity code. The contract contains mappings to store coverage information for organ transplant, immunotherapy, and kidney transplant benefits for beneficiaries. It also includes functions to add coverage information and get coverage details for each beneficiary. The actual implementation may require additional modifications and validations based on the specific requirements and context.